InOutSample="Out Sample",
Location=location,
Denomination=denomination,
fh=fh,
MAPE=mape(result.pred[,1],result.pred[,2])))
}
}
}
source("all_function.R")
init_run()
set.seed(72)
if(!exists("compile")){
compile <- data.frame(Model=character(),
InOutSample=character(),
Location=character(),
Denomination=character(),
fh=numeric(),
MAPE=numeric())
}
for(location in c("Jakarta","Surabaya","Bandung"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts)
mlp.model<-mlp(train_test_data$train,hd=c(10,8,5),
reps = 1,
lags = 1:60)
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,2])))
compile<-rbind(compile,data.frame(Model="MLP",
InOutSample="In Sample",
Location=location,
Denomination=denomination,
fh=0,
MAPE=mape(result[,1],result[,2])))
for (fh in 1:24) {
frc.mlp<-forecast(mlp.model,h=fh)
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",fh," ",
mape(result.pred[,1],result.pred[,2])))
compile<-rbind(compile,data.frame(Model="MLP",
InOutSample="Out Sample",
Location=location,
Denomination=denomination,
fh=fh,
MAPE=mape(result.pred[,1],result.pred[,2])))
}
}
}
source("all_function.R")
init_run()
set.seed(72)
if(!exists("compile")){
compile <- data.frame(Model=character(),
InOutSample=character(),
Location=character(),
Denomination=character(),
fh=numeric(),
MAPE=numeric())
}
for(location in c("Jakarta","Surabaya","Bandung"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]),
xreg.lags=list(0),xreg.keep=list(TRUE))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
compile<-rbind(compile,data.frame(Model="MLPX",
InOutSample="In Sample",
Location=location,
Denomination=denomination,
fh=0,
MAPE=mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,
xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
compile<-rbind(compile,data.frame(Model="MLPX",
InOutSample="Out Sample",
Location=location,
Denomination=denomination,
fh=fh,
MAPE=mape(result.pred[,1],result.pred[,2])))
}
}
}
View(compile)
write.csv(compile,file="datauji.csv")
install.packages("caret")
require(caret)
flds <- createFolds(flow_data_xts, k = 10, list = TRUE, returnTrain = FALSE)
flds
View(flds)
flds[["Fold01"]]
View(flow_data_xts)
flds <- createFolds(flow_data_xts[,1], k = 10, list = TRUE, returnTrain = FALSE)
flds
flds <- createFolds(flow_data_xts[,1], k = 10, returnTrain = FALSE)
flds
flow_data_xts[flds$Fold10,1]
data(oil)
createDataPartition(oilType, 2)
createFolds(oilType, 10)
oilType
createTimeSlices(flow_data_xts[,1])
createTimeSlices(1:9, 5, 1, fixedWindow = FALSE)
createTimeSlices(flow_data_xts, 5, 1, fixedWindow = FALSE)
createTimeSlices(flow_data_xts, 5, 1, fixedWindow = FALSE)
flds<-createTimeSlices(flow_data_xts, 5, 1, fixedWindow = FALSE)
View(flds)
flds<-createTimeSlices(flow_data_xts[,1], 5, 1, fixedWindow = FALSE)
flds
flds<-createTimeSlices(flow_data_xts[,1], 5, 1)
flds<-createTimeSlices(flow_data_xts[,1], 20, 1)
flds
packrat::snapshot()
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 100)
flds
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 100,horizon=20)
flds
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 300,horizon=20)
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 200,horizon=20)
flds
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 280,horizon=20)
flds
View(flds)
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 278,horizon=20)
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 277,horizon=20)
flds
306*0.8
createMultiFolds(flow_data_xts[,1], k = 10, times = 5)
createDataPartition(
flow_data_xts[,1],
times = 1,
p = 0.5,
list = TRUE,
groups = min(5, length(y))
)
createDataPartition(
flow_data_xts[,1],
times = 1,
p = 0.5,
list = TRUE)
createDataPartition(
flow_data_xts[,1],
times = 10,
p = 0.5,
list = TRUE)
createFolds(flow_data_xts[,1], k = 10, list = TRUE, returnTrain = FALSE)
flds<-createFolds(flow_data_xts[,1], k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
flds<-createFolds(flow_data_xts[,1], k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
flds[["Fold01"]]
flds<-createFolds(flow_data_xts[,1], k = 10, list = TRUE)
flds
View(flds)
flds<-createFolds(flow_data_xts[,1], k = 10, list = TRUE, returnTrain = TRUE)
View(flds)
flds[["Fold01"]]
flds[["Fold02"]]
flds[["Fold05"]]
flow_data_xts[flds$Fold01,1]
train<-flow_data_xts[flds$Fold01,1]
flow_data_xts[1:3,1]
fldx<-as.zoo(flow_data_xts)
fldx
fldx[1:3,1]
fldx[flds$Fold01,1]
fldx[flds$Fold02,1]
flds[["Fold02"]]
flds[["Fold01"]]
fldx[flds$Fold02,1]
auto.arima(fldx[flds$Fold02,1])
mlp(fldx[flds$Fold02,1])
fldx[flds$Fold02,1]
as.ts(fldx[flds$Fold02,1])
mlp(as.ts(fldx[flds$Fold02,1]))
flds<-createTimeSlices(flow_data_xts[,1],initialWindow = 277,horizon=20)
flds
install.packages(c("dlookr", "SmartEDA"))
init_run<-function(){
library(xts)
library(forecast)
library(nnfor)
library(TSrepr)
library(TSstudio)
library(tidyverse)
library(SmartEDA)
library(dlookr)
set.seed(72)
}
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data("Jakarta","K100000")
View(flow_data)
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
flow_data_xts
ExpData(data=flow_data_xts,type=1)
ExpData(data=flow_data,type=1)
ExpData(data=flow_data,type=2)
describe(flow_data)
describe(flow_data_xts)
describe(flow_data[,3])
flow_data[,3]
View(flow_data)
describe(data.frame(flow_data[,3]))
describe(flow_data)
describe(flow_data[,3:4])
describe(flow_data[,3])
describe(flow_data[3])
describe(flow_data,K100000)
describe(flow_data,3)
describe(flow_data,3)
normality(flow_data,3)
normality(flow_data,3)
plot_normality(flow_data,3)
describe(flow_data,3)
desc<-describe(flow_data,3)
View(desc)
normality(flow_data,3)
norm<-normality(flow_data,3)
norm
View(norm)
plot_normality(flow_data,3)
adf.test(flow_data_xts)
install.packages("aTSA")
init_run<-function(){
library(xts)
library(forecast)
library(nnfor)
library(TSrepr)
library(TSstudio)
library(tidyverse)
library(SmartEDA)
library(dlookr)
library(aTSA)
library(urca)
set.seed(72)
}
adf.test(flow_data_xts)
init_run<-function(){
library(xts)
library(forecast)
library(nnfor)
library(TSrepr)
library(TSstudio)
library(tidyverse)
library(SmartEDA)
library(dlookr)
library(aTSA)
library(urca)
set.seed(72)
}
adf.test(flow_data_xts)
library(aTSA)
library(urca)
adf.test(flow_data_xts)
adf.test(flow_data_xts[,1])
ur.df(flow_data_xts[,1])
ggg<-ur.df(flow_data_xts[,1])
View(ggg)
install.packages("tseries")
detach("package:aTSA", unload = TRUE)
library(tseries)
init_run<-function(){
library(xts)
library(forecast)
library(nnfor)
library(TSrepr)
library(TSstudio)
library(tidyverse)
library(SmartEDA)
library(dlookr)
library(tseries)
library(urca)
set.seed(72)
}
adf.test(flow_data_xts[,1])
hhh<-adf.test(flow_data_xts[,1])
View(hhh)
adf.test(flow_data_xts[,1],alternative = "explosive")
hhh<-adf.test(flow_data_xts[,1],alternative = c("explosive","stationary"))
hhh<-adf.test(flow_data_xts[,1])
hhh
plot_normality(flow_data,3)
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data("Jakarta","K100000")
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
ExpData(data=flow_data,type=2)
desc<-describe(flow_data,3)
norm<-normality(flow_data,3)
plot_normality(flow_data,3)
adf.test(flow_data_xts[,1])
ggg<-ur.df(flow_data_xts[,1])
hhh<-adf.test(flow_data_xts[,1])
ExpData(data=flow_data,type=2)
describe(flow_data,3)
View(desc)
normality(flow_data,3)
plot_normality(flow_data,3)
adf.test(flow_data_xts[,1])
acf(flow_data_xts)
acf(flow_data_xts[1])
acf(flow_data_xts[:,1])
acf(flow_data_xts[,1])
acf(flow_data_xts[,1],lag.max = 100)
acf(flow_data_xts[,1],lag.max = 10,)
acf(flow_data_xts[,1],lag.max = 20,)
acf(flow_data_xts[,1],lag.max = 50,)
acf(flow_data_xts[,1],lag.max = 100,)
pacf(flow_data_xts[,1],lag.max = 100)
desc.compile<-data.frame()
desc.compile<-data.frame()
for(location in c("Jakarta"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data("Jakarta","K100000")
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
desc<-describe(flow_data,3)
desc.compile<-rbind(desc.compile,desc)
}
}
View(desc.compile)
source("all_function.R")
init_run()
set.seed(72)
desc.compile<-data.frame()
for(location in c("Jakarta"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
desc<-describe(flow_data,3)
desc.compile<-rbind(desc.compile,desc)
}
}
View(desc.compile)
norm.compile<-data.frame()
source("all_function.R")
init_run()
set.seed(72)
desc.compile<-data.frame()
norm.compile<-data.frame()
for(location in c("Jakarta"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
desc<-describe(flow_data,3)
desc.compile<-rbind(desc.compile,desc)
norm<-normality(flow_data,3)
norm.compile<-rbind(norm.compile,norm)
}
}
View(norm.compile)
ur.df(flow_data_xts[,1])
View(ggg)
adf.test(flow_data_xts[,1])
adf<-adf.test(flow_data_xts[,1])
View(adf)
acf<-acf(flow_data_xts[,1],lag.max = 100)
View(acf)
adf
desc<-cbind(desc,data.frame(loc=location))
View(desc)
View(adf)
adf[["statistic"]]
adf.test(flow_data_xts[,1])
adf[["parameter"]]
adf[["statistic"]][["Dickey-Fuller"]]
adf[["p.value"]]
df.adf<-data.frame(
statistic=adf[["statistic"]][["Dickey-Fuller"]],
lag=adf[["parameter"]][["Lag order"]],
pval=adf[["p.value"]]
)
View(df.adf)
adf.compile<-data.frame()
View(desc.compile)
df.adf<-data.frame(
statistic=adf[["statistic"]][["Dickey-Fuller"]],
lag=adf[["parameter"]][["Lag order"]],
pval=adf[["p.value"]],
variable=denomination,
loc=location
)
df.adf
adf.compile<-rbind(adf.compile,df.adf)
View(adf.compile)
acf(flow_data_xts[,1],lag.max = 100)
acf(flow_data_xts[,1],lag.max = 100)
pacf(flow_data_xts[,1],lag.max = 100)
source("all_function.R")
init_run()
set.seed(72)
desc.compile<-data.frame()
norm.compile<-data.frame()
adf.compile<-data.frame()
for(location in c("Jakarta"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
desc<-describe(flow_data,3)
desc<-cbind(desc,data.frame(loc=location))
desc.compile<-rbind(desc.compile,desc)
norm<-normality(flow_data,3)
norm<-cbind(norm,data.frame(loc=location))
norm.compile<-rbind(norm.compile,norm)
adf<-adf.test(flow_data_xts[,1])
df.adf<-data.frame(
statistic=adf[["statistic"]][["Dickey-Fuller"]],
lag=adf[["parameter"]][["Lag order"]],
pval=adf[["p.value"]],
variable=denomination,
loc=location
)
adf.compile<-rbind(adf.compile,df.adf)
}
}
# plot_normality(flow_data,3)
# adf<-adf.test(flow_data_xts[,1])
# acf<-acf(flow_data_xts[,1],lag.max = 100)
# pacf(flow_data_xts[,1],lag.max = 100)
#
# ggg<-ur.df(flow_data_xts[,1])
# hhh<-adf.test(flow_data_xts[,1])
View(adf.compile)
View(desc.compile)
write.csv(desc.compile,file = "DescriptiveStatistics_Jakarta.csv")
write.csv(norm.compile,file = "NormalityTest_Jakarta.csv")
write.csv(adf.compile,file = "ADFTest_Jakarta.csv")
source("all_function.R")
init_run()
set.seed(72)
desc.compile<-data.frame()
norm.compile<-data.frame()
adf.compile<-data.frame()
for(location in c("Jakarta"))
{
for(denomination in c("K100000","K50000","K20000","K10000","K5000","K2000","K1000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],
start=c(flow_data[1,1], flow_data[1,2]),
end=c(2019, 6),frequency = 12)
desc<-describe(flow_data,3)
desc<-cbind(desc,data.frame(loc=location))
desc.compile<-rbind(desc.compile,desc)
norm<-normality(flow_data,3)
norm<-cbind(norm,data.frame(loc=location))
norm.compile<-rbind(norm.compile,norm)
adf<-adf.test(flow_data_xts[,1])
df.adf<-data.frame(
statistic=adf[["statistic"]][["Dickey-Fuller"]],
lag=adf[["parameter"]][["Lag order"]],
pval=adf[["p.value"]],
variable=denomination,
loc=location
)
adf.compile<-rbind(adf.compile,df.adf)
}
write.csv(desc.compile,file = paste0("DescriptiveStatistics_",location,".csv"))
write.csv(norm.compile,file = paste0("NormalityTest_",location,".csv"))
write.csv(adf.compile,file = paste0("ADFTest_",location,".csv"))
}
# plot_normality(flow_data,3)
# adf<-adf.test(flow_data_xts[,1])
# acf<-acf(flow_data_xts[,1],lag.max = 100)
# pacf(flow_data_xts[,1],lag.max = 100)
#
# ggg<-ur.df(flow_data_xts[,1])
# hhh<-adf.test(flow_data_xts[,1])

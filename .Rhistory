colnames(result.pred)<-c("test_data","external_regressors","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,3])))
}
}
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
View(mlp.model)
mlp.model[["xreg.lags"]][[1]]
mlp.model[["xreg.lags"]]
View(train_test_data)
train_test_data$train[,2]
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts,sample.out = 20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",mape(result[,1],result[,3])))
frc.mlp<-forecast(mlp.model,h=20,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test,frc.mlp$mean)
colnames(result.pred)<-c("test_data","external_regressors","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,3])))
}
}
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts,sample.out = 20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test,frc.mlp$mean)
colnames(result.pred)<-c("test_data","external_regressors","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,3])))
}
}
}
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test,frc.mlp$mean)
frc.mlp
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
result.pred
train_test_data$test[1:fh]
result.pred
train_test_data$test
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","external_regressors","mlp_fitted")
result.pred
train_test_data$test
frc.mlp$mean
train_test_data$test[1:fh]
result.pred
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","external_regressors","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,3])))
}
}
}
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
result.pred
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
flow_data_xts[,2]
View(mlp.model)
mlp.model[["net"]][["call"]]
mlp.model[["net"]][["model.list"]][["variables"]]
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(train_test_data$train[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
result
train_test_data
View(train_test_data)
train_test_data<-ts_split(flow_data_xts)
View(train_test_data)
train_test_data<-ts_split(flow_data_xts,sample.out = 20)
View(train_test_data)
length(flow_data_xts)
dim(flow_data_xts)
dim(flow_data_xts)[2]
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
arima.model2<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2],
lambda = "auto")
result<-ts.intersect(train_test_data$train,arima.model$fitted)
colnames(result)<-c("train_data","external_regressors","arima_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24) {
frc.arima<-forecast(arima.model,h=fh,xreg = train_test_data$test[,2][1:fh])
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.arima$mean)
colnames(result.pred)<-c("test_data","arima_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",fh," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
View(train_test_data)
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts,sample.out = 20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(train_test_data$train[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
arima.model2<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2],
lambda = "auto")
result<-ts.intersect(train_test_data$train,arima.model$fitted)
colnames(result)<-c("train_data","external_regressors","arima_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24) {
frc.arima<-forecast(arima.model,h=fh,xreg = train_test_data$test[,2][1:fh])
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.arima$mean)
colnames(result.pred)<-c("test_data","arima_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",fh," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
View(flow_data_xts)
View(train_test_data)
100*20%
100*(20/100)
my_function<- function(x){
x*2
}
add_eidulfitr_regressor<-function(data){
holidays<-prophet::generated_holidays
holidays<-holidays %>% filter(country=="ID" & holiday=="Eid al-Fitr")
holidays$bulan<-as.integer(format(as.Date(holidays$ds), "%m"))
holidays$tahun<-as.integer(format(as.Date(holidays$ds), "%Y"))
add_1994<-data.frame("1994-03-14","Eid al-Fitr","ID",1994,3,1994)
names(add_1994)<-c("ds","holiday","country","year","bulan","tahun")
holidays<-rbind(holidays, add_1994)
data<-data %>% left_join(holidays,copy = TRUE)
data<-data %>% select(tahun:ds)
data<-data %>% mutate(ds=ifelse(is.na(ds),yes = 0,no=1))
#colnames(data)[colnames(data) == 'ds'] <- 'eid'
#data<-as_tibble(data) %>% rename(ds=eid)
#%>%  %>%
}
read_data<-function(kota,pecahan){
library(gsheet)
library(tidyverse)
url<-"https://docs.google.com/spreadsheets/d/1pYpYd04zw6iUz32mGkGNz_1_-jorwM-QWGxXSKiOzpo/edit?usp=sharing"
a <- gsheet2text(url, format='csv')
b <- read.csv(text=a, stringsAsFactors=FALSE)
c<-b %>% filter(Kota == kota)
Dataset_Surabaya <- c
data_outflow<-data.frame(tahun=Dataset_Surabaya[["Tahun"]],
bulan=Dataset_Surabaya[["Bulan"]],
data1=Dataset_Surabaya[pecahan]
)
index<-data_outflow[pecahan]==0
data_outflow[pecahan][index]<-NA
data_outflow<-na.omit(na.approx(data_outflow))
data_outflow<-as.data.frame(data_outflow)
data_outflow<-add_eidulfitr_regressor(data_outflow)
#holidays<-eidulfitr_regressor(country = "ID",holiday = "Eid al-Fitr")
#data_outflow<-left_join(data_outflow,holidays,copy=TRUE)
#data_outflow<-data_outflow %>% select(tahun:ds)
#data_outflow<-data_outflow %>% mutate(ds=ifelse(is.na(ds),yes = 0,no=1))
}
init_run<-function(){
library(xts)
library(forecast)
library(nnfor)
library(TSrepr)
library(TSstudio)
library(tidyverse)
set.seed(72)
}
split_data<-function(data,precentage_test){
library(TSstudio)
length_data<-dim(flow_data_xts)[1]
n_test<-length_data*(precentage_test/100)
n_train<-length_data-n_test
split<-ts_split(data,sample.out = n_test)
return(split)
}
####################grid search################
#testFun <- function(x) {
#  mlp.model<-mlp(train_test_data$train,hd=c(x[1],x[2]),xreg = cbind(EIDULFITR),reps = 1,lags = x[3])
#  mlp.model$MSE
#}
#res <- gridSearch(fun=testFun, levels = list(1:10,1:10,1:24))
#res$minfun
#res$minlevels
###############################################
train_test_data<-split_data(flow_data_xts,precentage_test = 20)
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,precentage_test = 20)
train_test_data<-split_data(flow_data_xts,20)
split_data<-function(data,precentage_test){
library(TSstudio)
length_data<-dim(flow_data_xts)[1]
n_test<-length_data*(as.numeric(precentage_test)/100)
n_train<-length_data-n_test
split<-ts_split(data,sample.out = n_test)
return(split)
}
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
split_data<-function(data,precentage_test){
library(TSstudio)
length_data<-dim(flow_data_xts)[1]
n_test<-length_data*(as.numeric(precentage_test)/100)
n_train<-length_data-n_test
split<-ts_split(data,sample.out = n_test)
return(split)
}
train_test_data<-split_data(flow_data_xts,20)
as.integer(3.14)
as.integer(3.84)
as.integer(3.94)
round(3.81)
round(3.51)
round(3.21)
split_data<-function(data,precentage_test){
library(TSstudio)
length_data<-dim(flow_data_xts)[1]
n_test<-round(length_data*(precentage_test/100))
n_train<-length_data-n_test
split<-ts_split(data,sample.out = n_test)
return(split)
}
train_test_data<-split_data(flow_data_xts,20)
View(train_test_data)
View(train_test_data)
47/(189+47)
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(train_test_data$train[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
# for (fh in 1:24){
#   frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(flow_data_xts[,2]))
#
#   result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
#   colnames(result.pred)<-c("test_data","mlp_fitted")
#
#   print(paste0("out-sample MAPE : ",location," ",denomination," ",
#                mape(result.pred[,1],result.pred[,2])))
# }
}
}
View(train_test_data)
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(train_test_data$test[,2]))
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = as.data.frame(train_test_data$test[,2]))
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
frc.mlp<-forecast(mlp.model,h=fh,xreg = train_test_data$test[,2])
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = train_test_data$test[,2])
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
}
frc.mlp<-forecast(mlp.model,h=fh,xreg = train_test_data$test[,2][1:fh])
source("all_function.R")
init_run()
set.seed(72)
for(location in c("Jakarta"))
{
for(denomination in c("K100000"))
{
flow_data<-read_data(location,denomination)
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),
reps = 1,
lags = 1:60,
xreg = as.data.frame(flow_data_xts[,2]))
result<-ts.intersect(train_test_data$train,mlp.model$fitted)
colnames(result)<-c("train_data","external_regressor","mlp_fitted")
print(paste0("in-sample MAPE : ",location," ",denomination," ",
mape(result[,1],result[,3])))
for (fh in 1:24){
frc.mlp<-forecast(mlp.model,h=fh,xreg = train_test_data$test[,2][1:fh])
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.mlp$mean)
colnames(result.pred)<-c("test_data","mlp_fitted")
print(paste0("out-sample MAPE : ",location," ",denomination," ",
mape(result.pred[,1],result.pred[,2])))
}
}
}
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data("Jakarta","K100000")
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts,sample.out=20)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
#arima.model2<-auto.arima(train_test_data$train,lambda = "auto",xreg =EIDULFITR)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
result<-ts.intersect(train_test_data$train,mlp.model$fitted,arima.model2$fitted)
colnames(result)<-c("train_data","external_regressors","mlp_fitted","arima_fitted")
print(paste0("in-sample MAPE : ",mape(result[,1],result[,2]+result[,3])))
for (fh in 1:24)
{
frc.arima<-forecast(arima.model,h=fh,xreg = train_test_data$test[,2][1:fh])
frc.mlp<-forecast(mlp.model,h=fh)
result.pred<-ts.intersect(train_test_data$test[1:fh],frc.arima$mean,frc.mlp$mean)
colnames(result.pred)<-c("test_data","arima_pred","mlp_pred")
print(paste0("Out-sample error : ",location," ",denomination," ",fh," ",
mape(result.pred[,1],result.pred[,2]+result.pred[,3])))
}
source("all_function.R")
init_run()
set.seed(72)
flow_data<-read_data("Jakarta","K100000")
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-ts_split(flow_data_xts,sample.out=20)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
train_test_data$train[,1]
flow_data_xts
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =flow_data_xts[,2],lags = 1:60)
train_test_data<-split_data(flow_data_xts,20)
flow_data<-read_data("Jakarta","K100000")
flow_data_xts <- ts(flow_data[,3:4],start=c(flow_data[1,1], flow_data[1,2]), end=c(2019, 6),
frequency=12)
train_test_data<-split_data(flow_data_xts,20)
arima.model<-auto.arima(train_test_data$train[,1],xreg =train_test_data$train[,2] )
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2],lags = 1:60)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =train_test_data$train[,2])
View(flow_data_xts)
mlp.model<-mlp(train_test_data$train[,1],hd=c(10,8,5),reps=1,
xreg =flow_data_xts[,2],lags = 1:60)
